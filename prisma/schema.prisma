generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// CarModel represents a type of car (e.g., Toyota Camry 2020)
model CarModel {
  id        Int      @id @default(autoincrement())
  make      String // e.g., "Toyota", "Ford"
  model     String // e.g., "Camry", "Mustang"
  version   String // e.g., "XEI"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation: A CarModel can have many CarSales
  sales CarSale[]
}

// CarSale represents an individual car sale
model CarSale {
  id         Int      @id @default(autoincrement())
  carModelId Int // Foreign key linking to CarModel
  carYear    Int // e.g., 2020
  priceUsd   Float // Sale price in USD
  priceArs   Float // Sale price in ARS
  saleDate   DateTime // Date of the sale
  location   String // Where the sale happened
  status     String // In what status was the car
  notes      String // Any other comments on the sale
  userId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relation: Each CarSale belongs to one CarModel
  carModel CarModel @relation(fields: [carModelId], references: [id], onDelete: Cascade)
  // Relation: Each CarSale belongs to one User
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// User represents a user who can create car sales
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique // Unique email for each user
  name      String // User's name
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation: A User can have many CarSales
  carSales CarSale[] // Links to all sales made by this user
}
